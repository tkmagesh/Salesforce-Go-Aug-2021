Schedule
    Commence    : 9:00 AM
    Tea Break   : 10:30 AM (15 mins)
    Lunch Break : 12:30 PM (1 hr)
    Tea Break   : 3:00 PM (15 mins)
    Wind up     : 5:00 PM


Why Golang?
    1. Manage Memory
    2. Concurrency (Simplified)
    3. Functional

    1. Better performance
        - No runtime
        - compiled
        - on par with 'C' (without overhead of memory management)

    2. Simplicity
        - No classes (Only structs & functions)
        - No inheritance (Only composition)
        - No exceptions (Only error handling)
        - No access modifiers
        - No generics
        - ONLY 25 keywords
            package, func, var, type, struct, interface, return, if, else, switch, case, for, break, continue, bool, int, float, string, chan, map, slice, nil, true, false, go, select, fallthrough

    3. Simplified Concurrency
        - Builtin scheduler
        - Concurrency features are built in the language
            go keyword
            chan datatype
            <- operator
            select, range constructs
        - 2 KB of memory per goroutine
        - thousands of goroutines can be scheduled in one OS thread


http://golang.org
http://code.visualstudio.com

go version
        
TED Talk
    "Paradox of Choice"
        - Barry Schwartz


CMD + SHIFT + P
    GO: Install/update tools
    Select all the tools and click 'ok'

Modules > Packages > .go files

To run a go program
    go run <program_name.go>

To compile a go program
    go build <program_name.go>

To customize the binary created during customization
    go build -o <binary_name>  <program_name.go>


Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32) (represent a unicode code point)

programming constructs
    if else, for, switch case, break, continue, fallthrough


Assignment-1
    Build an interactive calculator

    Print the following menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit

    Keep displaying the menu until the user selects 5
    If the user choice is between 1 and 4
        Accepts 2 integers from the user
        perform the calculation
        print the result
        display the menu


Functions
    Variadic functions
    Higher Order functions
        functions as objects
            - functions can be assigned to variables
            - functions can be passed as arguments to other functions
            - functions can be returned from other functions

Global functions in golang
    https://pkg.go.dev/builtin@go1.17
    
    len (string, slice, array)
    cap
    append
    make
    close

Assignment - 2
    Create a function (counter) that increments a value by 1 everytime it is invoked
        counter() // => 1
        counter() // => 2
        counter() // => 3
        counter() // => 4

    The outcome of the counter function should not be able to be influenced from outside

Collection Types
    Array
    Slice
    Map

    Array
        Fixed size collection of data of the same type

    Slice
        Wrapper on an array
        Varying size
        The data should be of the same type

    Map
        Collection of Key-Value pairs

Assingment

Find the length of the word that occurs the most by size in the following string
    "Dolore duis velit magna eu sunt et excepteur cupidatat ullamco non ex Aliquip amet consequat enim enim occaecat quis fugiat officia quis aliquip pariatur Consequat cillum eiusmod proident culpa duis dolor incididunt id occaecat ex consectetur id dolor Mollit fugiat sit irure do cupidatat officia deserunt laboris ametElit ut dolore incididunt irure elit consectetur Quis exercitation reprehenderit nostrud occaecat nisi ipsum nulla cillum quis labore tempor minim magna ullamco Et nostrud nostrud enim sunt esse excepteur exercitation ad officia sint aliqua exercitation doCillum Lorem reprehenderit minim minim Voluptate magna ipsum incididunt voluptate cillum enim Aute cupidatat fugiat tempor sint labore dolore dolore consectetur id anim ea voluptate Occaecat dolore do aute nulla reprehenderit Minim magna aliquip magna commodo dolore culpa sint nostrud sit non fugiat Eu sunt incididunt deserunt enim adipisicing nulla quis nostrud culpa dolore Mollit pariatur id velit qui duis irureId ea minim commodo labore ullamco proident laborum ad adipisicing Elit ullamco officia culpa magna amet voluptate dolor Occaecat pariatur ea consectetur sunt anim et Lorem in tempor labore velit pariatur velit Minim qui aliquip ad aliquip id nulla labore dolore nulla culpa culpa Irure laborum mollit veniam dolore Lorem Commodo aliqua esse incididunt sit in aliquip incididunt deserunt"

    5 letter = 10 words
    6 letter = 5 words
    7 letter = 13 words
    .
    .
    .

    Output:
        The size of the word that occurs the most by size = 5 with number of occurances = 38


Go Modules
Modules > Packages > go files

GO environment variables
    go env

PRE go 1.13
    $GOPATH
        pkg
        bin
        src
            github.com
                tkmagesh
                    go-app-1
                        main.go
                            import "github.com/tkmagesh/go-app-1/pk1"
                        pkg1
                            pkg1.go

                    go-app-2

Create a go module
    go mod int <module_name>

To install a open source module
    go get <module_name>

To localize the dependencies in to the 'vendo' directory
    go mod vendor

Structure & Interpretation of Computer Programs (book)

interface{} type


Testing
    To run the tests
        go test ./...

    Mocking library
        github.com/stretchr/testify

    tool for generating mocks
        github.com/vektra/mockery

    To generate the mocks
        mockery --all --keeptree

    To run benchmars
        go test ./... -bench=.
        go test ./... -bench=. -benchtime=10s
